{"cells":[{"kind":1,"language":"markdown","value":"    1. Introduction\n\nIn this section we will get a detailed look at arrays. We're going to learn all kinds of operations that you can perform on arrays, such as:\n- Adding elements\n- Finding elements\n- Removing elements\n- Splitting arrays\n- Combining arrays","index":0},{"kind":1,"language":"markdown","value":"    2. Adding Elements","index":1},{"kind":2,"language":"javascript","value":"const numbers = [3, 4]; // As a constants, we cannot reassign values to this variable, but we cannot add or remove elements of the array.\n\n// End\nnumbers.push(5, 6); // Adds 5 & 6 to the end of the array.\n// Beginning\nnumbers.unshift(1, 2); // Pushes elements in the array to the right and adds the new elements to the beginning.\n// Middle\nnumbers.splice(2, 0, 'a', 'b');\n// The first input into the splice method is the index # for the element (where in the array to start the splice).\n// The second input is deleteCount, which allows you to input how many values to delete from the middle of the array (or none).\n// The third input and beyond are where you add the elements you would like to add into the middle of the array.\n\nconsole.log(numbers);","index":2},{"kind":1,"language":"markdown","value":"    3. Finding Elements (Primitives)","index":3},{"kind":2,"language":"javascript","value":"const number = [1, 2, 3, 1, 4]\n\nnumbers.indexOf();\n// If the element you pass through the indexOf method is found in the array, it will return \"0\"\n// If the element is not found in the array, it will return \"-1\"\n// indexOf is type sensitive\nnumber.lastIndexOf();\n// This will return the position in the array a given element is.\nnumbers.indexOf(1) !== -1;\n// This equation will let you know whether or not an element exists in an array\n// However, this method is quite ugly, we've got a better way\nnumbers.includes(1)\n// This will return true if the given element exists in the array\n// We can also input where in the array we would like to begin our search\nnumbers.indexOf(1, 2);\n// This will look for the element \"1\" in the array, starting from the position 2.","index":4},{"kind":1,"language":"markdown","value":"    4. Finding Elements (Reference Types)","index":5},{"kind":2,"language":"javascript","value":"const courses = [\n    {id: 1, name: 'a'}, // Can duplicate this row down by holding Shift, alt, and the down-arrow\n    {id: 2, name: 'b'}\n];\n\ncourses.includes({id: 1, name: 'a'});\n// This operation will result in false\n// This is because the object that we are passing through the includes method, and the object that we created within the courses object,\n// are two different objects. They have two difference references, two different locations in the memory.\n\n// Instead, use this method\ncourses.find()\n// When using this find method, we have to pass through a function and a statement.\n// This function is called the predicate. It determines if the given element exists in an array.\nconst course = courses.find(function(course) { // We are passing \"course\" as our element, because we are looking for a specific 'course' in our courses object. (It can be any word really).\n    course.name === 'a';\n});\n\nconsole.log(course);\n// If the element exists, the console will display it.\n// If it does not exist, the console will display undefinded.\n\n// We also have the findIndex method\nconst course1 = courses.findIndex(function(course) {\n    return course.name === 'a';\n});\n\nconsole.log(course1);\n// If the element exists, the console will display it's position in the array (0, in this case for the element 'a').\n// If the element does not exists, the console will display \"-1\".","index":6},{"kind":1,"language":"markdown","value":"    5. Arrow Functions","index":7},{"kind":2,"language":"javascript","value":"const courses = [\n    {id: 1, name: 'a'}, \n    {id: 2, name: 'b'}\n];\n\nconst course = courses.find(function(course) {\n    course.name === 'a';\n});\n\nconsole.log(course);","index":8},{"kind":1,"language":"markdown","value":"We can produce the same result in a much cleaner way than the code above.","index":9},{"kind":2,"language":"javascript","value":"const course = courses.find((course) => {\n    return course.name === 'a';\n})\n\n// Because our function only has a single parameter, we can get rid of the parentheses around our function element.\nconst course = courses.find(course => {\n    return course.name === 'a';\n})\n\n// If the function has no parameters, we have to pass an empty parentheses.\nconst course = courses.find(() => {\n    return course.name === 'a';\n})\n\n// Finally, if the function is only a single line of code and it is returning a value, we can make the code even cleaner.\nconst course = courses.find(course => course.name === 'a');\n","index":10},{"kind":1,"language":"markdown","value":"    6. Removing Elements","index":11},{"kind":2,"language":"javascript","value":"const numbers = [1, 2, 3, 4];\n\n// When adding elements to the End, Beginning, and Middle of an array, we used these methods:\nnumbers.push();\nnumber.unshift();\nnumbers.splice();\n\n// When removing elements from the End, Beginning, and Middle, we use these methods respectively:\nconst last = numbers.pop();\nconsole.log(numbers); // This will display our new array without element in the final position (4).\nconsole.log(last); // This will display the element that was removed from the end of the array.\n\nconst first = numbers.shift();\nconsole.log(first); // This will display the element that was removed from the first position (1).\n\nconst middle = numbers.splice(2, 1); // In this argument, we are removing 1 element from the second position in the array (3).\nconsole.log(numbers);","index":12},{"kind":1,"language":"markdown","value":"    7. Emptying an Array","index":13},{"kind":2,"language":"javascript","value":"const numbers = [1, 2, 3, 4];\n\n// Solution 1: If you change the numbers variable to a let instead of a const, you can use this:\nnumbers = [];\n// This solution, however, will only work if there is only one instance of this object in the memory.\n// If there is another object that references numbers somewhere in your code, the array will not be overwritten and will still be\n// saved in the memory held by that variable.\n\n// Solution 2:\nnumbers.length = 0;\n// This will truncate this array and remove all elements.\n// It will also do this for any variables that are referencing this variable.\n\n// Solution 3:\nnumbers.splice(0, numbers.length);\n// If we start from the beginning element and delete the elements that make up the length of the array, the array will be emptied.\n\n// Solution 4:\nwhile (numbers.length > 0)\n    numbers.pop();\n// This method will run until all elements from the array are removed.\n// This will hamper performance and is not recommended.","index":14},{"kind":1,"language":"markdown","value":"    8. Combining and Slicing Arrays","index":15},{"kind":2,"language":"javascript","value":"const first = [1, 2, 3];\nconst second = [4, 5, 6];\n\n// To combine these arrays we will concatenate them using the .concat method.\nconst combined = first.concat(second);\nconsole.log(combined);\n\n// We can also slice an array into two parts using the .slice method.\nconst slice = combined.slice(2, 4);\n// The elements we input into the method was the starting and ending index (elements in the array) that we want to slice out.\nconsole.log(slice);\n// This will display this array: [3, 4]. Because we started at index '2' and ended at index '4'.\n// We can also remove one or both of the .slice methods to remove more or all of the chosen array.","index":16},{"kind":1,"language":"markdown","value":"if you are dealing with primitive elements in the chosen arrays, when you concate them, they will be copied into the target array. However, you are working with objects in an array, the references themselves are copied. That means that the references in the input and output arrays will point to the same object.","index":17},{"kind":2,"language":"javascript","value":"// For Example\nconst first = [{id: 1}];\n\nconst combined = first.concat(second);\nfirst[0].id = 10; // Changing the first element in the 'id' object of the 'first' array to '10'.\nconsole.log(combined);\n// Because both the 'first' and 'combined' arrays reference the same 'id' object, both arrays will display the new value of '10'.","index":18},{"kind":1,"language":"markdown","value":"    9. The Spread Operator\n\nThe Spread operator is a cleaner way to achieve the same operation done in the .concat method.","index":19},{"kind":2,"language":"javascript","value":"// const combined = first.concat(second);\nconst combined = [...first, ...second];\n// Using the spread (...) method, we are taking all of the elements of the 'first' array and adding it to all of the elements\n// of the 'second' array.\n// The spread method is a better visualization of what action is being done in the code.","index":20},{"kind":2,"language":"javascript","value":"// If we want to add new elements to the beginning, middle, or end of the new array, this is the syntax.\nconst combined1 = ['a', ...first, 'b', ...second, 'c'];\n\n// We can also create a copy of an array with the spread operator.\nconst copy = [...combined];","index":21},{"kind":1,"language":"markdown","value":"    10. Iterating an Array","index":22},{"kind":2,"language":"javascript","value":"const numbers = [1, 2, 3];\n\n// When iterating an array, we know we want to use the For/Of loop\nfor (let number of numbers) \nconsole.log(number); // Result: \"1 2 3\"\n// In this loop 'number' will be set to one of the elements of the 'numbers' array.\n\n// We can also complete this same operation with the .forEach method, which takes a callback function.\nnumbers.forEach(function(number) {\n    console.log(number);\n});\n// When we call this callback function, it will be run for each element in the array.\n// Each element will be passed as an argument to this function.\n\n// We can also use the arrow function syntax to simplfy this code:\nnumbers.forEach(number => console.log(number));\n\n// We can also use the .forEach method to see the index (position) of each array element, as well as the element.\nnumbers.forEach((number, index) => console.log(index, number));","index":23},{"kind":1,"language":"markdown","value":"    11. Joining Arrays","index":24},{"kind":2,"language":"javascript","value":"const numbers = [1, 2, 3];\nconst joined = numbers.join(','); \n// Note: any parameter that VScode shows with a question mark is optional. In this case, it is a string separator.\nconsole.log(joined); // Result: \"1, 2, 3\"","index":25},{"kind":2,"language":"javascript","value":"// Another method that goes hand-in-hand with joins is the split method. However, it is meant for strings, not arrays.\nconst message = 'This is my first message'\nconst split = message.split(' '); // This method can also receive a separator\nconsole.log(split);\n// This metod will return an array of strings.\n// Result: \"This\", \"is\", \"my\", \"first\", \"message\"\n\n// Now that we have this original string split into an array of elements, we can use the join method to bring them together.\nconst splitJoin = split.join('-');\nconsole.log(splitJoin);\n// This code of operations is useful when building a URL slug. This is because there cannot be any white space in URLs.","index":26},{"kind":1,"language":"markdown","value":"    12. Sorting Arrays","index":27},{"kind":2,"language":"javascript","value":"const numbers = [2, 3, 1];\nnumbers.sort();\nconsole.log(numbers);\n// This method converts the elements of the array to a string and then sorts the elements in the array.\n\nnumbers.reverse();\nconsole.log(numbers);\n// Pretty self explanatory. Does what sort does but in reverse order (descending).","index":28},{"kind":2,"language":"javascript","value":"// While this method works with primitives, it doesn't work by default with objects, we have to do some extra work.\nconst courses = [\n    {id: 1, name: 'Node.js'},\n    {id: 2, name: 'JavaScript'}\n];\n// If we want to sort this object by course name (Node.js before JavaScript), we need to pass extra arguments in the sort method.\ncourses.sort(function(a, b) { // 'a' and 'b' represent the two properties of the object.\n    // a < b => -1\n    // a > b => 1\n    // a === b => 0\n\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1; // We are not using else if here because if the first statment is true, we want to jump out of the function.\n    return 0;\n});\nconsole.log(courses);\n\n// However, if we change the case of 'JavaScript' to lowercase, the objects will not sort correctly.\n// This is because each letter in JS is interally represented using a number.\n// Upper and lowercase letters are represented as different values.\n\n// To combat this issue, we can update our callback function\ncourse.sort(function(a, b) {\n    const nameA = a.name.toUpperCase(); // We could also change to lowercase here instead\n    const nameB = b.name.toUpperCase();\n\n    if (nameA < nameB) return -1;\n    if (nameA > nameB) return 1;\n    return 0;\n});","index":29},{"kind":1,"language":"markdown","value":"    13. Testing the Elements of an Array","index":30},{"kind":2,"language":"javascript","value":"// Suppose we want to test if the numbers in an array are positive\nconst number = [1, 2, 3];\n\nconst allPositive = numbers.every(function(value) {\n    return value >= 0;\n});\nconsole.log(allPositive); // Result: True\n\n// If we want to see if we have at least one element in this array that matches the conditional criteria, we use the some method\nconst somePositive = numbers.some(function(value){\n    return value >= 0:\n});\nconsole.log(somePositive);","index":31},{"kind":1,"language":"markdown","value":"    14. Filtering an Array","index":32},{"kind":2,"language":"javascript","value":"// How to filter an array based on search criteria\nconst numbers = [1, -1, 2, 3];\n\n// The filter method will find elements in the array that match the criteria and put them into a new output array.\nconst filtered = numbers.filter(function(value) {\n    return value >= 0;\n});\n\n// In arrow notation\nconst filterArrow = numbers.filter(value => value >= 0);\nconsole.log(filterArrow);","index":33},{"kind":1,"language":"markdown","value":"    15. Mapping an Array\n\nThe .map method allows us to 'map' each item in an array to something else.","index":34},{"kind":2,"language":"javascript","value":"const numbers = [1, -1, 2, 3];\n\nconst filtered = numbers.filter(n => n >= 0);\n\n// Using this syntax, we can construct some HTML markup from the elements in the 'filtered' array.\nconst items = filtered.map(n => '<li>' + n + '</li>');\n// We are mapping n to (=>) an opening and closing set of list elements in order to include it in HTML code.\nconsole.log(items);\n// In the displayed result, we will see that each element of the array is not mapped to a string.\n\n// Now we can use the join method to join the elements of this new array into a complete string.\nconst html = items.join(' '); // Note that commas are the default separator when none is chosen.\n\n// Now we have to add the ul elements to the string so that it can be included in the html markup.\nconst html1 = '<ul>' + items.join(' ') + '</ul>';\n\nconsole.log(html1);\n\n","index":35},{"kind":2,"language":"javascript","value":"// We can also map elements in an array to objects.\nconst numbers = [1, -1, 2, 3];\n\nconst filtered = numbers.filter(n => n >= 0);\n\nconst items = filtered.map(n => {\n    const obj = {value: n};\n    return obj;\n});\n\nconsole.log(items);\n\n// We can also clean up our map function my removing redundant code:\nconst items1 = filtered.map(n => {\n    return {value: n};\n});\n\n// Also, remember that if we are running a single line of code in a callback function and we are returning a value, we can remove even more code.\nconst items2 = filtered.map(n => ({value: n}));\n// It is important to remember when mapping elements on to objects, JavaScript recognizes code in curly braces as code blocks.\n// If we tried to run the code above without putting the object in parentheses, we would receive 3 undefined objects.\n// In order to ensure that the JS engine will parse the object correctly, we need to place it in parentheses as well.","index":36},{"kind":1,"language":"markdown","value":"Important to remember that the .filter and .map methods create new arrays, they do not change the original array. Because they are creating new arrays, we can chain them together.","index":37},{"kind":2,"language":"javascript","value":"numbers.filter(n => n >= 0).map(n => ({value: n}));\n\n// Best practice is to put each method acting upon the array on separate lines:\nconst items = numbers\n    .filter(n => n >= 0)\n    .map(n => ({value: n}));\n\n// Using this chain method, we can attach several other methods at the same time.\nconst items1 = numbers\n    .filter(n => n >= 0)\n    .map(n => ({value: n}))\n    .filter(obj => obj.value > 1)\n    .map(obj => obj.value);\nconsole.log(items1);","index":38},{"kind":1,"language":"markdown","value":"    16. Reducing an Array","index":39},{"kind":2,"language":"javascript","value":"// Say we want to gather the sum of all the items in this array.\nconst numbers = [1, -1, 2, 3];\n\nlet sum = 0;\nfor(let n of numbers)\n    sum += n;\n\nconsole.log(sum);\n\n// However, we can make this easier on ourselves by using the reduce method.\nconst sum1 = numbers.reduce((accumulator, currentValue) => {\n    return accumulator + currentValue;\n}, 0);\n// The accumulator value is equivalent to initializing the sum variable from above.\n// Each time the loop is iterated, the currentValue parameter will take the value of one of the elements of the array.\n// Adding '0' as a second argument initializes our accumulator property to 0.\nconsole.log(sum1);\n\n// If we do not supply an initial value, JS will run the loop for the second element in the array using the first element as the initial value.\nconst sum2 = numbers.reduce((accumulator, currentValue) => {\n    return accumulator + currentValue;\n});\n\n// Of course, we can also simplify this code because we have only run single line.\nconst sum3 = numbers.reduce(\n    (accumulator, currentValue) => accumulator + currentValue\n);","index":40}]}