{"cells":[{"kind":1,"language":"markdown","value":"    1. Introduction\n\nIn this section we will get a detailed look at arrays. We're going to learn all kinds of operations that you can perform on arrays, such as:\n- Adding elements\n- Finding elements\n- Removing elements\n- Splitting arrays\n- Combining arrays","index":0},{"kind":1,"language":"markdown","value":"    2. Adding Elements","index":1},{"kind":2,"language":"javascript","value":"const numbers = [3, 4]; // As a constants, we cannot reassign values to this variable, but we cannot add or remove elements of the array.\n\n// End\nnumbers.push(5, 6); // Adds 5 & 6 to the end of the array.\n// Beginning\nnumbers.unshift(1, 2); // Pushes elements in the array to the right and adds the new elements to the beginning.\n// Middle\nnumbers.splice(2, 0, 'a', 'b');\n// The first input into the splice method is the index # for the element (where in the array to start the splice).\n// The second input is deleteCount, which allows you to input how many values to delete from the middle of the array (or none).\n// The third input and beyond are where you add the elements you would like to add into the middle of the array.\n\nconsole.log(numbers);","index":2},{"kind":1,"language":"markdown","value":"    3. Finding Elements (Primitives)","index":3},{"kind":2,"language":"javascript","value":"const number = [1, 2, 3, 1, 4]\n\nnumbers.indexOf();\n// If the element you pass through the indexOf method is found in the array, it will return \"0\"\n// If the element is not found in the array, it will return \"-1\"\n// indexOf is type sensitive\nnumber.lastIndexOf();\n// This will return the position in the array a given element is.\nnumbers.indexOf(1) !== -1;\n// This equation will let you know whether or not an element exists in an array\n// However, this method is quite ugly, we've got a better way\nnumbers.includes(1)\n// This will return true if the given element exists in the array\n// We can also input where in the array we would like to begin our search\nnumbers.indexOf(1, 2);\n// This will look for the element \"1\" in the array, starting from the position 2.","index":4},{"kind":1,"language":"markdown","value":"    4. Finding Elements (Reference Types)","index":5},{"kind":2,"language":"javascript","value":"const courses = [\n    {id: 1, name: 'a'}, // Can duplicate this row down by holding Shift, alt, and the down-arrow\n    {id: 2, name: 'b'}\n];\n\ncourses.includes({id: 1, name: 'a'});\n// This operation will result in false\n// This is because the object that we are passing through the includes method, and the object that we created within the courses object,\n// are two different objects. They have two difference references, two different locations in the memory.\n\n// Instead, use this method\ncourses.find()\n// When using this find method, we have to pass through a function and a statement.\n// This function is called the predicate. It determines if the given element exists in an array.\nconst course = courses.find(function(course) { // We are passing \"course\" as our element, because we are looking for a specific 'course' in our courses object. (It can be any word really).\n    course.name === 'a';\n});\n\nconsole.log(course);\n// If the element exists, the console will display it.\n// If it does not exist, the console will display undefinded.\n\n// We also have the findIndex method\nconst course1 = courses.findIndex(function(course) {\n    return course.name === 'a';\n});\n\nconsole.log(course1);\n// If the element exists, the console will display it's position in the array (0, in this case for the element 'a').\n// If the element does not exists, the console will display \"-1\".","index":6},{"kind":1,"language":"markdown","value":"    5. Arrow Functions","index":7},{"kind":2,"language":"javascript","value":"const courses = [\n    {id: 1, name: 'a'}, \n    {id: 2, name: 'b'}\n];\n\nconst course = courses.find(function(course) {\n    course.name === 'a';\n});\n\nconsole.log(course);","index":8},{"kind":1,"language":"markdown","value":"We can produce the same result in a much cleaner way than the code above.","index":9},{"kind":2,"language":"javascript","value":"const course = courses.find((course) => {\n    return course.name === 'a';\n})\n\n// Because our function only has a single parameter, we can get rid of the parentheses around our function element.\nconst course = courses.find(course => {\n    return course.name === 'a';\n})\n\n// If the function has no parameters, we have to pass an empty parentheses.\nconst course = courses.find(() => {\n    return course.name === 'a';\n})\n\n// Finally, if the function is only a single line of code and it is returning a value, we can make the code even cleaner.\nconst course = courses.find(course => course.name === 'a');\n","index":10},{"kind":1,"language":"markdown","value":"    6. Removing Elements","index":11},{"kind":2,"language":"javascript","value":"const numbers = [1, 2, 3, 4];\n\n// When adding elements to the End, Beginning, and Middle of an array, we used these methods:\nnumbers.push();\nnumber.unshift();\nnumbers.splice();\n\n// When removing elements from the End, Beginning, and Middle, we use these methods respectively:\nconst last = numbers.pop();\nconsole.log(numbers); // This will display our new array without element in the final position (4).\nconsole.log(last); // This will display the element that was removed from the end of the array.\n\nconst first = numbers.shift();\nconsole.log(first); // This will display the element that was removed from the first position (1).\n\nconst middle = numbers.splice(2, 1); // In this argument, we are removing 1 element from the second position in the array (3).\nconsole.log(numbers);","index":12},{"kind":1,"language":"markdown","value":"    7. Emptying an Array","index":13},{"kind":2,"language":"javascript","value":"const numbers = [1, 2, 3, 4];\n\n// Solution 1: If you change the numbers variable to a let instead of a const, you can use this:\nnumbers = [];\n// This solution, however, will only work if there is only one instance of this object in the memory.\n// If there is another object that references numbers somewhere in your code, the array will not be overwritten and will still be\n// saved in the memory held by that variable.\n\n// Solution 2:\nnumbers.length = 0;\n// This will truncate this array and remove all elements.\n// It will also do this for any variables that are referencing this variable.\n\n// Solution 3:\nnumbers.splice(0, numbers.length);\n// If we start from the beginning element and delete the elements that make up the length of the array, the array will be emptied.\n\n// Solution 4:\nwhile (numbers.length > 0)\n    numbers.pop();\n// This method will run until all elements from the array are removed.\n// This will hamper performance and is not recommended.","index":14}]}