{"cells":[{"kind":1,"language":"markdown","value":"    1. JavaScript Operators\n\nTypes of operators include Arithmetic, Assignment, Comparison, Logical, and Bitwise.","index":0},{"kind":1,"language":"markdown","value":"    2. Arithmetic Operators\n\nWe use these to perform calculations. This includes addition, substraction, multiplication, division, remainder of divison (%), and exponentiation (**).","index":1},{"kind":2,"language":"javascript","value":"// An example of incrementals\nlet x = 10;\nlet y = 3;\n\nconsole.log(x++);\n// This will result in \"10\" because we placed the incremental after the variable was called.\nconsole.log(x);\n// However, now that we have incremented the variable, the value increases by 1 the next time we call it.\n// The result here is now \"11\"\n\n// Decrementals\nconsole.log(--x);\n// Because we placed the operator before the variable, the decrement will parse and alter the variable before it is called.\n// The result here is \"9\"","index":2},{"kind":1,"language":"markdown","value":"    3. Assignment Operators","index":3},{"kind":2,"language":"javascript","value":"let x = 10;\n// The equal sign is an example of an Assignment Operator.\n\n// An incremental operator is equivalent to this equation.\nx++;\nx = x + 1;\n// The incremental operator assigns a new value to x through an equation.\n\nx = x + 5;\nx += 5;\n// Both lines above are exactly the same functionally.\n\nx = x * 3;\nx *= 3;\n// These are also the same.","index":4},{"kind":1,"language":"markdown","value":"    4. Comparison Operators","index":5},{"kind":2,"language":"javascript","value":"let x = 1;\n\nconsole.log(x > 0);\n// This will result \"true\". Comparison operators will always result in a boolean.\n\n// Relational\nconsole.log(x >= 1);\nconsole.log(x < 1);\nconsole.log(x <= 1);\n\n// Equality\nconsole.log(x === 1);\nconsole.log(x !== 1);","index":6},{"kind":1,"language":"markdown","value":"    5. Equality Operators","index":7},{"kind":2,"language":"javascript","value":"// Strict Equality Operator (Type + Value)\nconsole.log(1 === 1); // This is true\nconsole.log('1' === 1); // This is false, because we are comparing a string to a number\n\n// Loose Equality\nconsole.log(1 == 1); // This is true\nconsole.log('1' == 1); // This is still true because we are using the loose operator. The operation automatically converts to the correct type.\nconsole.log(true == 1); // This is also true. The loose operator converts the '1' number to a true boolean.","index":8},{"kind":1,"language":"markdown","value":"    6. Ternary Operators\n\nThe Ternary Operators allow for a quick if/else statement.","index":9},{"kind":2,"language":"javascript","value":"// If a customer has more than 100 points, they are a 'gold' customer, otherwise they are a 'silver' customer.\n\nlet points = 110;\nlet type = points > 100 ? 'gold' : 'silver'\n// This 'type' variable declares a condition.\n// The ternary operator then determines a given label depending on whether the condition is true or not.","index":10},{"kind":1,"language":"markdown","value":"    7. Logical Operators with Booleans","index":11},{"kind":2,"language":"javascript","value":"// Logical AND (&&)\n// Returns TRUE if both operands are TRUE\nconsole.log(false && true); // This will return FALSE because one of the operands are not TRUE\n\nlet highIncome = true;\nlet goodCreditScore = true;\nlet eligibleForLoan = highIncome && goodCreditScore;\nconsole.log(eligibleForLoan); // This will result in TRUE\n\n// Logical OR (||)\n// Returns TRUE if one of the operands are TRUE\nlet highIncome = false;\nlet goodCreditScore = true;\nlet eligibleForLoan = highIncome || goodCreditScore;\nconsole.log(eligibleForLoan); // This will result in TRUE even though highIncome is false\n\n// NOT (!)\nlet applicationRefused = !eligibleForLoan; // We are declaring here that an application is refused if someone is NOT (!) eligible for a loan\nconsole(eligibleForLoan);\n\n// When used together, it looks like this:\nlet highIncome = false;\nlet goodCreditScore = false;\nlet eligibleForLoan = highIncome || goodCreditScore;\nconsole.log('Eligible', eligibleForLoan);\nlet applicationRefused = !eligibleForLoan;\nconsole.log('Application Refused', applicationRefused);\n// This will result in \"Application Refused TRUE\" because the OR operation determined neither operand was TRUE\n// This results in the applicationRefused variable returning TRUE as eligibleForLoan was NOT TRUE.","index":12},{"kind":1,"language":"markdown","value":"    8. Logical Operators with Non-Booleans","index":13},{"kind":2,"language":"javascript","value":"false || true // TRUE\nfalse || 'Mosh' // \"Mosh\"\nfalse || 1 // 1\n\n// These are examples of Truthy operands","index":14},{"kind":2,"language":"javascript","value":"// Falsy (False)\n// undefined, null, 0, false, '', and NaN (Not a Number)\n\n// Anything that is not Falsy is Truthy\n// If one of the operands of an OR statement are not one of the Falsy examples, the statement will return that value, as seen above.","index":15},{"kind":2,"language":"javascript","value":"false || 1 || 2 // This will result in \"1\"\n// This is called 'short-circuiting'\n// No matter how many other operands there are, because '1' is the first, the statement will result in '1'.","index":16},{"kind":2,"language":"javascript","value":"let userColor = 'red';\nlet defaultColor = 'blue';\nlet currentColor = userColor || defaultColor;\n// Because the user has selected a non-null color (not Falsy), the statement will result in 'red'.\n\nlet userColor = undefined;\nlet defaultColor = 'blue';\nlet currentColor = userColor || defaultColor;\n// Because the user has not selected a color (null, undefined, etc.), the statement will result in 'blue', due to the OR operator.","index":17},{"kind":1,"language":"markdown","value":"    9. BitWise Operators\n\nBitWise operators are more theoretical than other operators and don't have have as many real-world use cases.\n\nGoing to skip the section for now, but will come back and take notes on it later when I've got more time.","index":18},{"kind":1,"language":"markdown","value":"    10. Operator Precedence\n\nEssentially JavaScript PEMDAS.","index":19},{"kind":2,"language":"javascript","value":"let x = 2 + 3 * 4;\n// This will result in '14' because the multiplication operator will perform is action first.\n\n// However, we can alter this expression to force the addition operator to perform first by putting it in parentheses.\nlet x = (2 + 3) * 4;","index":20},{"kind":1,"language":"markdown","value":"    11. Quiz","index":21},{"kind":2,"language":"javascript","value":"// What is the value of y?\nlet x = 10;\nlet y = (x > 5) && (x < 15);\n// This will result in true because both the first comparison operation and the second are true.\n\n// What is the value of x?\nlet x = 5;\nx += 3;\n// This will result in 8 because are assigning a new value to x through an operation.\n\n// What is the value of y?\nlet x = 10;\nlet y = x++;\n// This will result in 11 because we are assigning a value to y that is equal to incremental x.\n\n// What is the value of y?\nlet x = 1;\nlet y = x !== 2;\n// This will result in true because 1 does not loosely equal 2.","index":22},{"kind":1,"language":"markdown","value":"    12. Exercise - Swapping Variables","index":23},{"kind":2,"language":"javascript","value":"let a = 'red';\nlet b = 'blue';\n\n// Below, swap the values of these two variables.\n\nlet c = a;\na = b;\nb = c;\n\n// We created a third variable as a proxy for 'a'. 'c' captures the value of 'a' so that 'a's value can be swapped for 'b's.\n\nconsole.log(a);\nconsole.log(b);","index":24}]}