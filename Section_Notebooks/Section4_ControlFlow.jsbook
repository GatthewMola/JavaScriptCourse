{"cells":[{"kind":1,"language":"markdown","value":"    1. If... else\n\nTwo types of conditional statements in JS, If... else, and Switch... case.","index":0},{"kind":2,"language":"javascript","value":"// Basic structure\nif (condition) {\n    statement\n}\nelse if (anotherCondition) {\n    statement\n}\nelse if (yetAnotherCondition) {\n    statement\n}\nelse\n    statement","index":1},{"kind":2,"language":"javascript","value":"// Hour\n// If the hour is between 6am and 12pm: Good morning!\n// If it is between 12pm and 6pm: Good afternoon!\n// Otherwsie: Good evening!\n\nlet hour = 10;\n\nif (hour >= 6 && hour < 12)\n    console.log('Good Morning!');\nelse if (hour >= 12 && hour < 18)\n    console.log('Good Afternoon!');\nelse\n    console.log('Good Evening!');\n// Removed curly braces to make code cleaner\n// Need to check with Mike if this is best practice","index":2},{"kind":1,"language":"markdown","value":"    2. Switch... case","index":3},{"kind":2,"language":"javascript","value":"// Basic structure\nswitch (variable) {\n    case 'specific value':\n        console.log('return value');\n        break;\n}\n// Repeat same structure for more conditional values","index":4},{"kind":2,"language":"javascript","value":"let role;\n\nswitch (role) {\n    case 'guest':\n        console.log('Guest User');\n        break;\n    \n    case 'moderator':\n        console.log('Moderator User');\n        break;\n    \n    default:\n        console.log('Unknown User');\n}\n// No need for a break after the default case as it acts as a break in itself.","index":5},{"kind":1,"language":"markdown","value":"When working with booleans (true or false statements) it makes more sense to use if/else structure. When working with specific variables and return values, switch/case may be better. Some claim switch/case is outdated or inefficient/ugly.\n\nHowever, we can still use both if/else and switch/case interchangably for the same function.","index":6},{"kind":2,"language":"javascript","value":"if (role === 'guest')\n    console.log('Guest User');\nelse if (role === 'moderator')\n    console.log('Moderator User');\nelse\n    console.log('Unknown User');","index":7},{"kind":1,"language":"markdown","value":"    3. For\n\nLoops baby.\n\nWe've got For, While, Do/While, For/In, and For/Of varieties. All of these varieties essentially perform the same function, but they differ in how they start and end.","index":8},{"kind":2,"language":"javascript","value":"// For Loop Basic Structure\n\nfor (initialExpression)\n\nfor (let i = 0; condition) // 'i' in loops is equal to 'index'. This is the loop variable.\nfor (let i = 0; i < 5) // We set the index to < 5 so that the loop will run 5 times.\n\n// Below is the complete structure. After determine how long the loop will run,\n// we attach an increment operator which will allow the loop to run each iteration.\nfor (let i = 0; i < 5; i++) {\n    statement\n}\n\n// If we add an 'i' condition to the statement, the console will display all iterations of the loop.\nfor (let i = 0; i < 5; i++) {\n    statement, i\n}\n// If we adjust the initializing variable to i = 1, and the loop end to <= 5, the loop will start on 1 and end on iteration 5.\n// Right now, the iteration starts on 0 and ends on 4.","index":9},{"kind":2,"language":"javascript","value":"// For Loop Example: Odd Numbers\n\nfor (let i = 1; i <= 5; i++) {\n    if (i % 2 !== 0) console.log(i);\n}\n// If the remainder of i divided by 2 is not zero, then the number cannot be odd.\n\n// We can also descend these results instead of increment them.\nfor (let i = 5; i >= 1; i--) {\n    if (i % 2 !== 0) console.log(i);\n}","index":10},{"kind":2,"language":"javascript","value":"// FizzBuzz Problem\n// Print integers one-to-N, but print \"Fizz\" if an integer is divisible by three, \"Buzz\" if an integer is divisible by five,\n// and \"FizzBuzz\" if an integer is divisible by both three and five.\n\nfor (let num = 1; num <= 100; num++) {\n    if (num % 3 == 0 && num % 5 == 0)\n        console.log('FizzBuzz');\n    else if (num % 3 == 0)\n        console.log('Fizz');\n    else if (num % 5 == 0)\n        console.log('Buzz');\n    else\n        console.log(num);\n}","index":11},{"kind":1,"language":"markdown","value":"    4. While Loops\n\nOne key difference between a While loop and a For Loop is that a For loop variable is part of the loop itself. In a While loop, you have to declare the variable externally. The loop variable declared in a For loop cannot be recalled outside of the loop.","index":12},{"kind":2,"language":"javascript","value":"for (let i = 0; i <= 5; i++) {\n    if (i % 2 !== 0) console.log(i);\n}\n\nlet i = 0;\nwhile (i <= 5) {\n    if (i % 2 !== 0) console.log(i);\n    i++;\n}\n// The While loop essentially states that while the loop timeframe is less than or equal to 5 iterations, it will continue to function\n// as a loop by running the statement code.","index":13},{"kind":1,"language":"markdown","value":"    5. Do/While\n\nDo/While loops are very similar to While loop, but differ in particular ways. Namely, Do/While loops will run *at least* once, even if the while condition is false.","index":14},{"kind":2,"language":"javascript","value":"let i = 0;\ndo {\n    if (i % 2 !== 0) console.log(i);\n    i++;\n} while (i <= 5);\n// Because the while statement is executed at the end of the code block, the do statement will run at least once before the while\n// statement is evaluated as false (or true).","index":15},{"kind":1,"language":"markdown","value":"Do/While loops are not very common in programming, but good to know for specific situations.","index":16},{"kind":1,"language":"markdown","value":"    6. Infinite Loops\n\nInfinite loops will run forever, regardless of other code to be executed after it. These loops can crash your browser or app. While and Do/While loops can both be infinite loops if written in a certain way.","index":17},{"kind":2,"language":"javascript","value":"let i = 0;\nwhile (i < 5) {\n    console.log(i);\n    // i++;\n}\n\nwhile (true) {\n\n}\n\nlet x = 0;\ndo {\n    // x++;\n} while (x < 5);\n\nfor (let i = 0; i > 0; i++)","index":18},{"kind":1,"language":"markdown","value":"As you can see above, if you forget to include an increment in your loop, or you create a loop condition that cannot be met given your intialization variable, you will create an infinite loop.","index":19},{"kind":1,"language":"markdown","value":"    7. For/In Loop","index":20},{"kind":2,"language":"javascript","value":"const person = {\n    firstName: 'Mosh',\n    age: 30\n};\n\n// for (initialExpression; condition; increment);\n// syntax for a basic For loop\n\n// Syntax for For/In loop\nfor (let key in person)\n    console.log(key);\n// For each iteration of the loop, the 'key' variable will hold one of the properties of the 'person' object.\n// This block of code will iterate twice, to show the two properties of the 'person' object\n\n// What if we what to see the values of the properties as well?\nperson.firstName\nperson['name'] // Remember, we use the bracket notation when we don't know what property we are going to access at the time of execution.\n\nfor (let key in person)\n    console.log(key, person[key]);\n// We running key through person in bracket notation so that the key variable can hold each individual property for an iteration while executing.\n\nconst colors = ['red', 'green', 'blue'];\n\nfor (let index in colors)\n    console.log(index, colors[index]);\n// The index keyword variable will hold one of the items in the array once per iteration.","index":21},{"kind":1,"language":"markdown","value":"The index/array example shown above is not the most effective way of looping array objects. A For/Of loop is a better option.","index":22},{"kind":1,"language":"markdown","value":"    8. For/Of\n\nThe For/Of loop functions much like the For/In loop. In the For/In loop, 'Of' is switched out for 'In'.","index":23},{"kind":2,"language":"javascript","value":"const colors = ['red', 'green', 'blue'];\n\nfor (let color of colors)\n    console.log(color);","index":24},{"kind":1,"language":"markdown","value":"In a For/In loop, we don't have to include an index variable as a stand-in for the objects found in the array in bracket notation. We can simply log the objects of the array onto the console directly.","index":25},{"kind":1,"language":"markdown","value":"    Loops in Summation\n\nWe use the For/In loop to iterate over the properties of an object and a For/Of loop to iterate over the elements or items of an array.","index":26},{"kind":1,"language":"markdown","value":"    9. Break & Continue\n\nBreak and Continue are two keywords which can change how a loop will behave.","index":27},{"kind":2,"language":"javascript","value":"let i = 0;\nwhile (i <= 10) {\n    if (i === 5) break; // Using break after this if statement will cause the loop to stop iterating after the fifth iteration.\n\n    console.log(i);\n    i++;\n}","index":28},{"kind":2,"language":"javascript","value":"let i = 0;\nwhile (i <= 10) {\n    if (i % 2 === 0) {\n        i++;\n        continue;\n    }\n\n    console.log(i);\n    i++;\n}","index":29},{"kind":1,"language":"markdown","value":"According to Mosh, the continue keyword is not something you will use often in JS programming. It is, apparently, a legacy concept and an ugly way of writing code.","index":30}]}