{"cells":[{"kind":1,"language":"markdown","value":"    1. Variables\n\nOne of the most fundamental concepts of JS or any programming language.\n\nWe use a variable to store data temporarily in a computer's memory. We are giving this data a name (the variable name) so that we can find it's location somewhere in the computer's memory. Like putting a label on a box. Whatever we put in the box are the values of that variable.","index":0},{"kind":1,"language":"markdown","value":"    Big Note!:\n\nRemember that in JavaScript, the interpreter is the browser! You need to create a boilerplate html framework which includes a .js file within a script source in order to run from the browser console. Once you load this html framework correctly, you can then run code from the terminal using node.\n\nThis is one of the bigger differences from Python.","index":1},{"kind":2,"language":"javascript","value":"let firstName = 'Mosh';\nconsole.log(firstName);\n\n// variable names cannot be a reserved keyword, such as 'if' or 'let'\n// variable names should be meaningful\n// Cannot start with a number\n// Cannot contain a space or hyphen\n// Are case-sensitive","index":2},{"kind":1,"language":"markdown","value":"    2. Constants\n\nWhile the 'let' keyword will allow you to create a variable, it will not lock the value of the created variable. For example:","index":3},{"kind":2,"language":"javascript","value":"let interestRate = 0.3;\ninterestRate = 1;\nconsole.log(interestRate);\n\n// Despite the 'let' statement declaring interestRate to 0.3, because we wrote another statement declaring it as 1, the console\n// will now read it as 1","index":4},{"kind":1,"language":"markdown","value":"However, if we use the 'const' keyword, we can lock the original declared values to the variable.","index":5},{"kind":2,"language":"javascript","value":"const interestRate = 0.3;\ninterestRate = 1;\nconsole.log(interestRate);","index":6},{"kind":1,"language":"markdown","value":"In this code we will receive an error because we are attempting to reassign a value to a constant variable.\n\nBecause of this concept, if we are not planning on reassigning the values of a variable, our default will be const. Otherwise, we will use let.","index":7},{"kind":1,"language":"markdown","value":"    3. Primitive / Value Types\n\nDistinct from Reference Types (we will discuss later), Primitive/Value Types include values like string, number, boolean, undefined, and null.","index":8},{"kind":2,"language":"javascript","value":"let name = 'Most'; // String Literal\nlet age = 30; // Number Literal\nlet isApproved = true; // Boolean Literal\nlet firstName; // undefined\nlet lastName = undefined; // also undefined\nlet selectedColor = null; // null (clears the value of a variable)","index":9},{"kind":1,"language":"markdown","value":"    4. Dynamic Typing\n\nJavaScript is a Dynamic programming language. This means that the type of a variable declared in JS can change over time. This is opposed to a Static Language, in which variable cannot change over time (like Python).\n\nFor example, if we let the variable 'name' to the value of \"Matt\", the type of variable is a string. However, if we change the value to equal the integer 1, the type of variable is now a number. This is because the type for each variable to determined at runtime based on the values that we assigned to them.\n\nAnother distinction JavaScript has from other languages is that it does not discriminate different types of number. There are no floating numbers in JS, 30 and 30.1 are just \"number\".\n\nIn JavaScript, undefined is a type and a value. Much like true and false are automatically considered booleans. However, if we check the type of variable the selectedColor is, we will find that it is an \"object\", which is a Reference Type.","index":10},{"kind":1,"language":"markdown","value":"    5. Objects\n\nReference Types include Object, Array, and Function.\n\nObjects in JS are much like objects in the real world, they have properties. The properties of an object in JS are called the \"keys\". A value in curly braces in JS is an Object Literal","index":11},{"kind":2,"language":"javascript","value":"let person = {\n    name: 'Mosh',\n    age: 30\n};\n\n// Because we are declaring the properties of the object, we do not need to declare them as variables on their own.","index":12},{"kind":1,"language":"markdown","value":"Say we want to change the name of this object. There are two ways we can go about this.","index":13},{"kind":2,"language":"javascript","value":"let person = {\n    name: 'Mosh',\n    age: 30\n};\n\n// Dot Notation\nperson.name= 'John';\n\n// Bracket Notation\nperson['name'] = 'Mary';\n\nconsole.log(person.name)","index":14},{"kind":1,"language":"markdown","value":"Because Dot Notation is more efficient code wise, it will be our default when changing properties of objects. However, Bracket Notation has it's uses. For example, we may not know the name of the property until the time of parsing. \n\nIn this case, the property within the object notation will be inserted using an operator, much like in Python when we use curly braces within input functions to reference the outcome of other functions.","index":15},{"kind":1,"language":"markdown","value":"    6. Arrays\n\nWe can us arrays to store lists of values. Brackets initialize arrays (lists) in JavaScript, just like in Python. Arrays in JavaScript are \"objects\" in themselves.","index":16},{"kind":2,"language":"javascript","value":"let selectedColors = ['red', 'blue'];\nconsole.log(selectedColors);\n\n// The first element in this array is \"0: 'red'\". Every list starts at 0.","index":17},{"kind":2,"language":"javascript","value":"let selectedColors = ['red', 'blue'];\nconsole.log(selectedColors[0]);\n\n// This will only return the 'red' element.","index":18},{"kind":1,"language":"markdown","value":"Unlike in other programming languages, arrays in JavaScript do not have to be filled with objects of the same type. They can be filled with integers, strings, booleans, etc. all at the same time.","index":19},{"kind":2,"language":"javascript","value":"let selectedColors = ['red', 'blue'];\nselectedColors[2] = 1;\nconsole.log(selectedColors);\n\n// This will not result in a type error!","index":20},{"kind":1,"language":"markdown","value":"When defining an array in JavaScript, we will see - when using dot notation - that it automatically inherits certain properties, such as 'find', 'filter', 'fill', and 'length'.","index":21},{"kind":2,"language":"javascript","value":"let selectedColors = ['red', 'blue'];\nselectedColors[2] = 1;\nconsole.log(selectedColors.length);\n\n// This will return \"3\", as the lenght of the array is 3 items or objects.","index":22},{"kind":1,"language":"markdown","value":"    7. Functions\n\nThe final Reference Type, functions, are sets of statements that perform tasks or calculates values.\n\nMuch like in Python, we need to include closed parenthese as when declaring the function as part of the syntax. The close curly braces house the body of the function.","index":23},{"kind":2,"language":"javascript","value":"function greet() {\n    console.log('Hello World');\n}\n\n// Function declarations do not require semi-colon breaks like variable declarations do.\n\ngreet(); // This recalls the function.","index":24},{"kind":1,"language":"markdown","value":"We can also add inputs to this variable to make the function behave differently.","index":25},{"kind":2,"language":"javascript","value":"function greet(name) {\n    console.log('Hello ' + name);\n}\n\n// The 'name' variable in this case is considered a parameter. It is a variable that is only inherent to this function and\n// cannot be called outside of it.\n\ngreet('John');\n\n// 'John' is considered an argument. It takes the place of the function parameter when the function is called.\n// It denotes the actual value applied to the paramter (the input variable) ","index":26},{"kind":1,"language":"markdown","value":"A function can have multiple parameters.","index":27},{"kind":2,"language":"javascript","value":"function greet(name, lastName) {\n    console.log('Hello ' + name + lastName);\n}\n\ngreet('John', 'Brown');\n\n// This will output the concatenated string \"Hello John Brown\"\n\ngreet('John');\n\n// This will output the concatenated string \"Hellow John undefined\". This is because \"undefined\" is the default value in JavaScript.","index":28},{"kind":1,"language":"markdown","value":"This concatenation in the function here is not very efficient and can be done better. Later, we will use Template Literals to clean this up.","index":29},{"kind":1,"language":"markdown","value":"    8. Types of Functions\n\nBelow we outline different *functions* of functions:","index":30},{"kind":2,"language":"javascript","value":"// Performing a task\nfunction greet(name, lastName) {\n    console.log('Hello ' + name + lastName);\n}\n\n// Calculating a value\nfunction square(number) {\n    return number * number;\n}\n\nsquare(2) // Using '2' as the argument of the function, we are initializing the function by applying actual values, similar to Python.\n\n// We can also display this result in the terminal by declaring the function/argument combo as its own variable.\nfunction square(number) {\n    return number * number;\n}\n\nlet number = square(2);\nconsole.log(number);\n\n//However, we can make this code cleaner by passing the function/argument through the console.log function.\nfunction square(number) {\n    return number * number;\n}\n\nconsole.log(square(2));\n","index":31},{"kind":1,"language":"markdown","value":"To put these basics into perspective, an application is essentially the conglomeration of multiple (sometimes thousands) of functions working individually and within each other.","index":32}]}